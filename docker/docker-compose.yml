# Use postgres/example user/password credentials
version: '3.1'

services:
  db:
    build:
      context: ../db
    restart: always
    environment:
      POSTGRES_PASSWORD: example # TODO : Change this for production
      POSTGRES_USER: main # TODO : Change this for production
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend

  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    networks:
      - backend

  users-service:
    build:
      context: ../api/users-service
    ports:
      - "3001:3001"
    depends_on:
      - db
      - monolith-api
    links:
      - db:db
    networks:
      - backend

  monolith-api:
    restart: always
    container_name: monolith-api-container
    build:
      context: ../Monolith
      dockerfile: Dockerfile
    ports:
      - "4000:80"
    depends_on:
      - db
    links:
      - db:db
    networks:
      - backend
    command: ["dotnet", "MonolithApi.dll"]

  api-gateway:
    build:
      context: ../api-gateway
    ports:
      - "3000:3000"
    depends_on:
      - db
      - users-service
      - monolith-api
    links:
      - monolith-api:monolith-api
      - users-service:users-service
    networks:
      - backend
      - frontend

  sso:
    build:
      context: ../front/sso
    ports:
      - "8000:8000"
    depends_on:
      - api-gateway
    links:
      - api-gateway:api-gateway
    networks:
      - frontend

  app:
    build:
      context: ../front/app
    ports:
      - "8001:8000"
    depends_on:
      - api-gateway
      - monolith-api
    links:
      - api-gateway:api-gateway
      - monolith-api:monolith-api
    networks:
      - frontend

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
